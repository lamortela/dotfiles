#!/usr/bin/env bash

# ~/.macos — https://mths.be/macos
# Modified by Anthony Lamorte with lots of "inspiration" from Kent C. Dodds
# Run without downloading:
# curl https://raw.githubusercontent.com/anthlam/dotfiles/master/.macos | bash

# Close any open System Preferences panes, to prevent them from overriding
# settings we’re about to change
osascript -e 'tell application "System Preferences" to quit'

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

###############################################################################
# Anth's Customizations                                                       #
###############################################################################

echo -e "Setting up MacOS how you like it."

echo "Dotfile and Tool Setup"
echo "making 'code' directory"
mkdir -p "${HOME}/code"

echo "installing Homebrew"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

echo "generating RSA token for Github"
mkdir -p "${HOME}/.ssh"
ssh-keygen -t ed25519 -C "lamorte+github@gmail.com"
eval "$(ssh-agent -s)"
touch "${HOME}/.ssh/config"
echo "Host *\n AddKeysToAgent yes\n UseKeychain yes\n IdentifyFile ~/.ssh/id_ed25519" | tee "${HOME}/.ssh/config"
ssh-add --apple-use-keychain "${HOME}/.ssh/id_ed25519"
read -n1 -rsp $"*** In another shell, run 'pbcopy < ~/.ssh/id_ed25519.pub' and paste that into Github. Dotfile linking and tool installation happens next. Press enter to continue or Ctrl+C to quit.\n" key

echo "cloning dotfiles"
git clone git@github.com:anthlam/dotfiles.git "${HOME}/code/me/dotfiles"

echo "linking dotfiles"
ln -s "${HOME}/code/me/dotfiles/.aliases" "${HOME}/.aliases"
ln -s "${HOME}/code/me/dotfiles/.bash_profile" "${HOME}/.bash_profile"
ln -s "${HOME}/code/me/dotfiles/.bash_prompt" "${HOME}/.bash_prompt"
ln -s "${HOME}/code/me/dotfiles/.bashrc" "${HOME}/.bashrc"
ln -s "${HOME}/code/me/dotfiles/.brewfile" "${HOME}/.brewfile"
ln -s "${HOME}/code/me/dotfiles/.exports" "${HOME}/.exports"
ln -s "${HOME}/code/me/dotfiles/.functions" "${HOME}/.functions"
ln -s "${HOME}/code/me/dotfiles/.gitconfig" "${HOME}/.gitconfig"
ln -s "${HOME}/code/me/dotfiles/.gitconfig.personal" "${HOME}/.gitconfig.personal"
ln -s "${HOME}/code/me/dotfiles/.gitconfig.work" "${HOME}/.gitconfig.work"
ln -s "${HOME}/code/me/dotfiles/.gitignore_global" "${HOME}/.gitignore_global"
ln -s "${HOME}/code/me/dotfiles/.git_template" "${HOME}/.git_template"
cp "${HOME}/code/me/dotfiles/.hushlogin" "${HOME}/.hushlogin"
ln -s "${HOME}/code/me/dotfiles/.ignore" "${HOME}/.ignore"
ln -s "${HOME}/code/me/dotfiles/.inputrc" "${HOME}/.inputrc"
ln -s "${HOME}/code/me/dotfiles/.path" "${HOME}/.path"
ln -s "${HOME}/code/me/dotfiles/.profile" "${HOME}/.profile"
ln -s "${HOME}/code/me/dotfiles/.spacemacs" "${HOME}/.spacemacs"
ln -s "${HOME}/code/me/dotfiles/.tmux.conf" "${HOME}/.tmux.conf"
ln -s "${HOME}/code/me/dotfiles/.work" "${HOME}/.work"
ln -s "${HOME}/code/me/dotfiles/.vimrc" "${HOME}/.vimrc"

echo "installing latest bash and changing shell to bash"
brew install bash
echo "$(brew --prefix)/bin/bash" >> /etc/shells
chsh -s "$(brew --prefix)/bin/bash"
exec "${SHELL}"

echo "brew installing"
brew bundle --file="${HOME}/.brewfile"
read -n1 -rsp $"*** Review caveats to see if there is anything that needs to be done. Press enter to continue or Ctrl+C to quit...\n" key
rm "${HOME}/.brewfile"

echo "point neovim at .vimrc (https://neovim.io/doc/user/nvim.html#nvim-from-vim)"
echo "set runtimepath^=~/.vim runtimepath+=~/.vim/after" > "${HOME}/.config/nvim/init.vim"
echo "let &packpath = &runtimepath" >> "${HOME}/.config/nvim/init.vim"
echo "source ~/.vimrc" >> "${HOME}/.config/nvim/init.vim"

echo "setup fzf key bindings and fuzzy completion"
$(brew --prefix)/opt/fzf/install

echo "setting up spacemacs"
ln -s "$(brew --prefix)/opt/emacs-mac/Emacs.app /Applications/"
git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
(cd ~/.emacs.d/ && git checkout develop)

echo "installing nvm"
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash

echo "installing latest node lts"
nvm install --lts --latest-npm
echo "node --version: $(node --version)"
echo "npm --version: $(npm --version)"

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key


echo -e "\nUI/UX Settings"
###############################################################################
# General UI/UX                                                               #
###############################################################################

# Expand save panel by default
echo "expand save and print panels by default"
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Expand print panel by default
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

# Save to disk (not to iCloud) by default
echo "save to disk, instead of iCloud, by default"
defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

# Automatically quit printer app once the print jobs complete
echo "automatically quit printer app once print jobs complete"
defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

# Disable automatic capitalization as it’s annoying when typing code
echo "disable automatic capitalization"
defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

# Disable smart dashes as they’re annoying when typing code
echo "disable automatic dash substitution"
defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

# Disable automatic period substitution as it’s annoying when typing code
echo "disable automatic period substitution"
defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

# Disable smart quotes as they’re annoying when typing code
echo "disable smart quotes"
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

# Disable auto-correct
echo "disable auto-correct"
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nMouse, Keyboard, Bluetooth Settings"
###############################################################################
# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
###############################################################################

# Trackpad: enable tap to click for this user and for the login screen
echo "enable tap to click"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -int 1
defaults write com.apple.AppleMultitouchTrackpad Clicking -int 1
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

# Trackpad: enable three finger drag on trackpad
echo "enable three finger drag"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadThreeFingerDrag -int 1
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -int 1

# Trackpad: enable two finger right-click
echo "enable two finger right-click"
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true
defaults write com.apple.AppleMultitouchTrackpad TrackpadRightClick -bool true

# Enable full keyboard access for all controls
# (e.g. enable Tab in modal dialogs)
echo "enable full keyboard access for all controls (i.e. being able to tab through webforms)"
defaults write NSGlobalDomain AppleKeyboardUIMode -int 2

# Set a blazingly fast keyboard repeat rate
echo "enable faster key repeat"
defaults write NSGlobalDomain KeyRepeat -int 1
defaults write NSGlobalDomain InitialKeyRepeat -int 12

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nPower Management Settings"
###############################################################################
# Energy saving                                                               #
###############################################################################

# Restart automatically if the computer freezes
echo "enable automatic restart on freeze"
sudo systemsetup -setrestartfreeze on

# Sleep the display after 10 minutes
echo "set display sleep idle time to 10 minutes"
sudo pmset -a displaysleep 10

# Never go into computer sleep mode
echo "disable computer sleep after idle time"
sudo systemsetup -setcomputersleep 15

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nScreen Settings"
###############################################################################
# Screen                                                                      #
###############################################################################

# Save screenshots to the ~/Documents/Screenshots
echo "save screenshots to ~/Documents/Screenshots"
defaults write com.apple.screencapture location -string "${HOME}/Documents/Screenshots"

# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
echo "set screenshot format to PNG"
defaults write com.apple.screencapture type -string "png"

# Enable subpixel font rendering on non-Apple LCDs
# Reference: https://github.com/kevinSuttle/macOS-Defaults/issues/17#issuecomment-266633501
echo "make fonts look better on non-retina displays"
defaults write NSGlobalDomain AppleFontSmoothing -int 1

# Enable HiDPI display modes (requires restart)
# sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nFinder Settings"
###############################################################################
# Finder                                                                      #
###############################################################################

# Finder: disable window animations and Get Info animations
echo "disable window animations"
defaults write com.apple.finder DisableAllAnimations -bool true

# Show icons for hard drives, servers, and removable media on the desktop
echo "show external/network volumes on desktop"
defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
# defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true
# defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

# Finder: show all filename extensions
# echo "display file extensions"
# defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Finder: show status bar
echo "show finder status bar"
defaults write com.apple.finder ShowStatusBar -bool true

# Finder: show path bar
echo "show finder path bar"
defaults write com.apple.finder ShowPathbar -bool true

# Display full POSIX path as Finder window title
# echo "show full path as finder window title"
# defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

# Keep folders on top when sorting by name
# echo "show folders first when sorting finder by name"
# defaults write com.apple.finder _FXSortFoldersFirst -bool true

# When performing a search, search the current folder by default
# echo "set finder default search context to current folder"
# defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# Disable the warning when changing a file extension
# echo "disable file extensions change warning"
# defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# Enable spring loading for directories
echo "enable spring loading on finder directories"
defaults write NSGlobalDomain com.apple.springing.enabled -bool true

# Remove the spring loading delay for directories
echo "set spring loading delay to 0"
defaults write NSGlobalDomain com.apple.springing.delay -float 0.2

# Avoid creating .DS_Store files on network or USB volumes
echo "do not create .DS_Store on external/network volumes"
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

# Use column view in all Finder windows by default
# Four-letter codes for the other view modes: `icnv`, `Nlsv`, `clmv`, `glyv`
echo "set finder default view to column view"
defaults write com.apple.finder FXPreferredViewStyle -string "clmv"

# Disable the warning before emptying the Trash
echo "disable warning before emptying trash"
defaults write com.apple.finder WarnOnEmptyTrash -bool false

# Show the /Volumes folder
echo "show /Volumes in finder"
sudo chflags nohidden /Volumes

# Expand the following File Info panes:
# “General”, “Open with”, and “Sharing & Permissions”
echo "expand certain file info panels by default"
defaults write com.apple.finder FXInfoPanesExpanded -dict \
	General -bool true \
	OpenWith -bool true \
	Privileges -bool true

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nDock Settings"
###############################################################################
# Dock, Dashboard, and hot corners                                            #
###############################################################################

# Enable highlight hover effect for the grid view of a stack (Dock)
echo "enable highlight hover on dock stacks"
defaults write com.apple.dock mouse-over-hilite-stack -bool true

# Set the icon size of Dock items to 36 pixels
echo "set dock icon size to 36 pixels"
defaults write com.apple.dock tilesize -int 36

# Change minimize/maximize window effect
echo "change dock min/max effect to scale"
defaults write com.apple.dock mineffect -string "scale"

# Minimize windows into their application’s icon
echo "minimize windows into app icon"
defaults write com.apple.dock minimize-to-application -bool true

# Enable spring loading for all Dock items
echo "enable spring loading on dock items"
defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true

# Show indicator lights for open applications in the Dock
echo "show indicator lights for open apps in dock"
defaults write com.apple.dock show-process-indicators -bool true

# Don’t animate opening applications from the Dock
echo "turn off app opening dock animations"
defaults write com.apple.dock launchanim -bool false

# Speed up Mission Control animations
echo "speed up mission control animations"
defaults write com.apple.dock expose-animation-duration -float 0.1

# Automatically hide and show the Dock
echo "hide/show dock automatically"
defaults write com.apple.dock autohide -bool true

# Make Dock icons of hidden applications translucent
echo "make dock icons of hidden apps translucent"
defaults write com.apple.dock showhidden -bool true

# Don’t show recent applications in Dock
echo "do not show recent apps in dock"
defaults write com.apple.dock show-recents -bool false

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nSafari/Webkit Settings"
###############################################################################
# Safari & WebKit                                                             #
###############################################################################

# Press Tab to highlight each item on a web page
#echo "tab can highlight each item on a web page"
#defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true
#defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true

# Allow hitting the Backspace key to go to the previous page in history
#echo "backspace goes back to previous page"
#defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true

# Enable Safari’s debug menu
echo "enable debug menu"
defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

# Make Safari’s search banners default to Contains instead of Starts With
echo "change search banners to Contains"
defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

# Enable the Develop menu and the Web Inspector in Safari
echo "enable develop menu and web inspector"
defaults write com.apple.Safari IncludeDevelopMenu -bool true
defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

# Add a context menu item for showing the Web Inspector in web views
echo "enable Web Inspector context menu item"
defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

# Enable continuous spellchecking
echo "enable continuous spellchecking"
defaults write com.apple.Safari WebContinuousSpellCheckingEnabled -bool true

# Disable auto-correct
echo "disable auto-correct"
defaults write com.apple.Safari WebAutomaticSpellingCorrectionEnabled -bool false

# Disable AutoFill
echo "disable auto-fill"
defaults write com.apple.Safari AutoFillFromAddressBook -bool false
defaults write com.apple.Safari AutoFillPasswords -bool false
defaults write com.apple.Safari AutoFillCreditCardData -bool false
defaults write com.apple.Safari AutoFillMiscellaneousForms -bool false

# Warn about fraudulent websites
echo "warn about fraudulent websites"
defaults write com.apple.Safari WarnAboutFraudulentWebsites -bool true

# Disable plug-ins
echo "disable plugins"
defaults write com.apple.Safari WebKitPluginsEnabled -bool false
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool false

# Disable Java
echo "disable java"
#defaults write com.apple.Safari WebKitJavaEnabled -bool false
#defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false
#defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabledForLocalFiles -bool false

# Block pop-up windows
echo "block pop-ups"
defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false

# Disable auto-playing video
echo "disable auto-playing video"
defaults write com.apple.Safari WebKitMediaPlaybackAllowsInline -bool false
defaults write com.apple.SafariTechnologyPreview WebKitMediaPlaybackAllowsInline -bool false
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false
defaults write com.apple.SafariTechnologyPreview com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false

# Enable “Do Not Track”
echo "enable 'Do Not Track'"
defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true

# Update extensions automatically
echo "automatic extension updates"
defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nMail Settings"
###############################################################################
# Mail                                                                        #
###############################################################################

# Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app
#echo "change email address copy behavior"
#defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false

# Display emails in threaded mode, sorted by date (oldest at the top)
echo "display emails in threaded mode"
defaults write com.apple.mail DraftsViewerAttributes -dict-add "DisplayInThreadedMode" -string "yes"

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nTerminal & iTerm Settings"
###############################################################################
# Terminal & iTerm 2                                                          #
###############################################################################

# Only use UTF-8 in Terminal.app
echo "use UTF-8 in terminal"
defaults write com.apple.terminal StringEncodings -array 4

# Enable Secure Keyboard Entry in Terminal.app
# See: https://security.stackexchange.com/a/47786/8918
echo "enable secure keyboard entry"
defaults write com.apple.terminal SecureKeyboardEntry -bool true

# Disable the annoying line marks
echo "disable line marks"
defaults write com.apple.Terminal ShowLineMarks -int 0

# Don’t display the annoying prompt when quitting iTerm
echo "do not prompt when quitting iterm"
defaults write com.googlecode.iterm2 PromptOnQuit -bool false

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nActivity Monitor Settings"
###############################################################################
# Activity Monitor                                                            #
###############################################################################

# Show the main window when launching Activity Monitor
echo "show main window when launching"
defaults write com.apple.ActivityMonitor OpenMainWindow -bool true

# Show all processes in Activity Monitor
echo "show all processes"
defaults write com.apple.ActivityMonitor ShowCategory -int 0

# Sort Activity Monitor results by CPU usage
echo "sort by CPU usage"
defaults write com.apple.ActivityMonitor SortColumn -string "CPUUsage"
defaults write com.apple.ActivityMonitor SortDirection -int 0

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nUtility Settings"
###############################################################################
# Address Book, Dashboard, iCal, TextEdit, and Disk Utility                   #
###############################################################################

# Use plain text mode for new TextEdit documents
echo "open new TextEdit docs in plain text mode"
defaults write com.apple.TextEdit RichText -int 0
# Open and save files as UTF-8 in TextEdit
echo "use UTF-8 in TextEdit"
defaults write com.apple.TextEdit PlainTextEncoding -int 4
defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nApp Store Settings"
###############################################################################
# Mac App Store                                                               #
###############################################################################

# Enable the WebKit Developer Tools in the Mac App Store
echo "enable webkit dev tools"
defaults write com.apple.appstore WebKitDeveloperExtras -bool true

# Enable Debug Menu in the Mac App Store
echo "enable debug menu"
defaults write com.apple.appstore ShowDebugMenu -bool true

# Enable the automatic update check
echo "enable automatic update check"
defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true

# Download newly available updates in background
echo "download updates in background"
defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

# Install System data files & security updates
#echo "install critical updates"
#defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

# Turn on app auto-update
#echo "turn on auto update"
#defaults write com.apple.commerce AutoUpdate -bool true

# Don't allow the App Store to reboot machine on macOS updates
#echo "disable app store reboot"
#defaults write com.apple.commerce AutoUpdateRestartRequired -bool false

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nMessages Settings"
###############################################################################
# Messages                                                                    #
###############################################################################

# Disable smart quotes as it’s annoying for messages that contain code
#echo "disable smart quotes"
#defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticQuoteSubstitutionEnabled" -bool false

# Disable continuous spell checking
#echo "disable continuous spell check"
#defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" -bool false

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nGoogle Chrome Settings"
###############################################################################
# Google Chrome & Google Chrome Canary                                        #
###############################################################################

# Expand the print dialog by default
echo "expand the print dialog by default"
defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true
defaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true

read -n1 -rsp $"*** Review output so far to see if it is safe to continue. Press enter to continue or Ctrl+C to quit...\n" key
echo -e "\nKilling Affected Applications"
###############################################################################
# Kill affected applications                                                  #
###############################################################################

for app in "Activity Monitor" \
	"Address Book" \
	"Calendar" \
	"cfprefsd" \
	"Contacts" \
	"Dock" \
	"Finder" \
	"Google Chrome Canary" \
	"Google Chrome" \
	"Mail" \
	"Messages" \
	"Photos" \
	"Safari" \
	"Spectacle" \
	"SystemUIServer" \
	"Terminal" \
	"Transmission" \
	"iCal"; do
	killall "${app}" &> /dev/null
done
echo "Done. Note that some of these changes require a logout/restart to take effect."
